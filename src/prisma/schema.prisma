// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Session        Session[]
  Account        Account[]
  AboutMe        AboutMe[]
  Project        Project[]
  Experience     Experience[]

  @@map("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AboutMe {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  description String
  bio         String
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  url         String
  stack       String
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Experience {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employer   String
  occupation String
  startDate  DateTime
  endDate    DateTime?
  url        String
  stack      String
  isPresent  Boolean   @default(false)
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}
